Meteor.startup ->


	Handlebars.registerHelper 'momentFromNow', (someDate)->
		moment(someDate).fromNow()


	Handlebars.registerHelper 'meteorOnline', ->
		Meteor.status().status is 'connected'

	#/*
	#	Analyes Meteor.status() and returns en empty string if we're
	#	connected. Otherwise, this will return a message.
	#	Examples of strings:
	#
	#	- when status is "waiting"
	#		"Attempt 1. Will try again in 3 seconds"
	#	- when status is "connecting"
	#		"connecting..."
	#	- when status is "offline"
	#		"Offline"
	#	- when status is "failed"
	#		"Connection failed. [...]" where [...] is the failure message
	#*/
	Handlebars.registerHelper 'meteorStatus', ->
		status = Meteor.status()
		if status.status is 'connected'
			true
		else if status.status is 'connecting'
			'connecting...'
		else if status.status is 'offline'
			'offline'
		else if status.status is 'waiting'
			'Attempt ' + status.retryCount +
				'. Will try again in ' + status.retryTime
		else if status.status is 'failed'
			'Connection failed. ' + status.reason


	Handlebars.registerHelper 'currentRoute', ->
		Router.current().route.name


	Handlebars.registerHelper 'mandrillVersion', ->
		Mandrill.version


	Handlebars.registerHelper 'meteorVersion', ->
		Meteor.release

	Handlebars.registerHelper 'absoluteUrl', ->
		Meteor.absoluteUrl()



	#// Determines if the current user is an admin.
	Handlebars.registerHelper 'isAdmin', ->
		user = Meteor.user()
		user? and user.mandrill? and user.mandrill.isAdmin is true


	Handlebars.registerHelper 'loginServiceIsConfigured', (serviceName)->
		service = Accounts.loginServiceConfiguration.findOne {service: serviceName}
		if service?
				true
		else
			false

	Handlebars.registerHelper 'loginServicesOAuthIsAvailable', ->
		services = Accounts.loginServiceConfiguration.find().count()
		if services? and services > 0
			true
		else
			false




	#/*
	#	Will output a [first][prev]x-y of z[next][last] pagination link set.
	#	The route controller's dataset must contain an object structured
	#	like the following:
	#	{
	#		unlimitedTotal: <int> // unpaginated number of results,
	#		recordsPerPage: 25 // defaults to 25, but can be anything.
	#	}
	#	In addition, the links generated by this helper are aware of two
	#	url parameters, 'q' and 'p'. 'q' is a user search (query) and 'p'
	#	is the current page of results the user wants. The default number
	#	of records on a single page is 25, but you can pass a value in
	#	recordsPerPage as outlined above if you need to adjust this.
	#*/
	Handlebars.registerHelper 'paginationLinks', (navClass)->
		pageRouter = Router.current()
		params = pageRouter.params
		data = pageRouter.data()
		currentPage = parseInt( params.p || 0)
		first = {query: {}}
		prev = {query: {}}
		next = {query: {}}
		last = {query: {}}
		onFirstPage = ''
		onLastPage = ''
		metrics = {start: 0, end: 0, total: 0}
		perPage = data.recordsPerPage or 25
		navClass = navClass or ''
		
		metrics.total = data.unlimitedTotal or 0
		metrics.start = currentPage * perPage + 1
		metrics.end = currentPage * perPage + perPage
		metrics.end = if metrics.end > metrics.total then metrics.total else metrics.end

		totalPages = Math.floor(metrics.total / perPage)
		
		if currentPage <= 0
			onFirstPage = ' class="disabled"'

		if currentPage >= totalPages
			onLastPage = ' class="disabled"'

		#// build the query object
		if params.q
			first.query.q = params.q
			prev.query.q = params.q
			next.query.q = params.q
			last.query.q = params.q
		
		prev.query.p = if currentPage - 1 >= 0 then currentPage -1 else 0
		next.query.p = if currentPage + 1 <= totalPages then currentPage + 1 else totalPages
		last.query.p = totalPages


		new Handlebars.SafeString(
			'<ul class="pager ' + navClass + '">' +
				'<li' + onFirstPage + '><a href="' +
					Router.path(pageRouter.route.name, {}, first) +
				'">First</a></li>' +
				'<li' + onFirstPage + '><a href="' +
					Router.path(pageRouter.route.name, {}, prev) +
				'">Prev</a></li>' +
				'<li class="text-muted">&nbsp;' + metrics.start +
					' - ' + metrics.end + ' of ' + metrics.total +
				'&nbsp;</li>' +
				'<li' + onLastPage + '><a href="' +
					Router.path(pageRouter.route.name, {}, next) +
				'">Next</a></li>' +
				'<li' + onLastPage + '><a href="' +
					Router.path(pageRouter.route.name, {}, last) +
				'\">Last</a></li>' +
			'</ul>')