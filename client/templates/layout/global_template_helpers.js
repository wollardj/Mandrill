Meteor.startup(function() {


	Handlebars.registerHelper('momentFromNow', function(someDate) {
		return moment(someDate).fromNow();
	});


	Handlebars.registerHelper('meteorOnline', function() {
		return Meteor.status().status === 'connected';
	});

	/*
		Analyes Meteor.status() and returns en empty string if we're
		connected. Otherwise, this will return a message.
		Examples of strings:

		- when status is "waiting"
			"Attempt 1. Will try again in 3 seconds"
		- when status is "connecting"
			"connecting..."
		- when status is "offline"
			"Offline"
		- when status is "failed"
			"Connection failed. [...]" where [...] is the failure message
	*/
	Handlebars.registerHelper('meteorStatus', function() {
		var status = Meteor.status();
		if (status.status === 'connected') {
			return true;
		}
		else if (status.status === 'connecting') {
			return 'connecting...';
		}
		else if (status.status === 'offline') {
			return 'offline';
		}
		else if (status.status === 'waiting') {
			return 'Attempt ' + status.retryCount +
				'. Will try again in ' + status.retryTime;
		}
		else if (status.status === 'failed') {
			return 'Connection failed. ' + status.reason;
		}
	});


	Handlebars.registerHelper('currentRoute', function () {
		return Router.current().route.name;
	});


	Handlebars.registerHelper('mandrillVersion', function () {
		return Mandrill.version;
	});


	Handlebars.registerHelper('meteorVersion', function () {
		return Meteor.release;
	});


	Handlebars.registerHelper('absoluteUrl', function () {
		return Meteor.absoluteUrl();
	});



	// Determines if the current user is an admin.
	Handlebars.registerHelper('isAdmin', function() {
		var user = Meteor.user();
		return user && user.mandrill && user.mandrill.isAdmin === true;
	});


	Handlebars.registerHelper('loginServiceIsConfigured',
		function(serviceName) {
			var service = Accounts.loginServiceConfiguration.findOne(
				{service: serviceName}
			);
			if (service) {
				return true;
			}
			return false;
		}
	);


	Handlebars.registerHelper('loginServicesOAuthIsAvailable', function() {
		var services = Accounts.loginServiceConfiguration.find().count();
		if (services && services > 0) {
			return true;
		}
		return false;
	});




	/*
		Will output a [first][prev]x-y of z[next][last] pagination link set.
		The route controller's dataset must contain an object structured
		like the following:
		{
			unlimitedTotal: <int> // unpaginated number of results,
			recordsPerPage: 25 // defaults to 25, but can be anything.
		}
		In addition, the links generated by this helper are aware of two
		url parameters, 'q' and 'p'. 'q' is a user search (query) and 'p'
		is the current page of results the user wants. The default number
		of records on a single page is 25, but you can pass a value in
		recordsPerPage as outlined above if you need to adjust this.
	 */
	Handlebars.registerHelper('paginationLinks', function(navClass) {
		var pageRouter = Router.current(),
			params = pageRouter.params,
			data = pageRouter.getData(),
			currentPage = parseInt( params.p || 0),
			first = {query: {}},
			prev = {query: {}},
			next = {query: {}},
			last = {query: {}},
			onFirstPage = '',
			onLastPage = '',
			metrics = {start: 0, end: 0, total: 0},
			totalPages,
			perPage = data.recordsPerPage || 25;
		
		navClass = navClass || '';
		
		metrics.total = data.unlimitedTotal || 0;
		metrics.start = currentPage * perPage + 1;
		metrics.end = currentPage * perPage + perPage;
		metrics.end = metrics.end > metrics.total ?
			metrics.total :
			metrics.end;

		totalPages = Math.floor(metrics.total / perPage);
		
		if (currentPage <= 0) {
			onFirstPage = ' class="disabled"';
		}
		if (currentPage >= totalPages) {
			onLastPage = ' class="disabled"';
		}

		// build the query object
		if (params.q) {
			first.query.q = params.q;
			prev.query.q = params.q;
			next.query.q = params.q;
			last.query.q = params.q;
		}
		
		prev.query.p = currentPage - 1 >= 0 ? currentPage -1 : 0;
		next.query.p = currentPage + 1 <= totalPages ?
			currentPage + 1 :
			totalPages;
		last.query.p = totalPages;


		return new Handlebars.SafeString(
			'<ul class="pager ' + navClass + '">' +
				'<li' + onFirstPage + '><a href="' +
					Router.path(pageRouter.route.name, {}, first) +
				'">First</a></li>' +
				'<li' + onFirstPage + '><a href="' +
					Router.path(pageRouter.route.name, {}, prev) +
				'">Prev</a></li>' +
				'<li class="text-muted">&nbsp;' + metrics.start +
					' - ' + metrics.end + ' of ' + metrics.total +
				'&nbsp;</li>' +
				'<li' + onLastPage + '><a href="' +
					Router.path(pageRouter.route.name, {}, next) +
				'">Next</a></li>' +
				'<li' + onLastPage + '><a href="' +
					Router.path(pageRouter.route.name, {}, last) +
				'\">Last</a></li>' +
			'</ul>');
	});

});